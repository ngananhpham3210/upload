document.addEventListener('DOMContentLoaded', () => {
    // --- State Variable ---
    let generatedCommand = '';

    // --- Element Selectors ---
    const statusMessage = document.getElementById('status-message');
    const copyCommandButton = document.getElementById('copy-command-btn');
    const settingsForm = document.getElementById('settings-form');
    const httpChunkSizeInput = document.getElementById('http-chunk-size');
    const limitRateInput = document.getElementById('limit-rate');
    const playerClientSelect = document.getElementById('player-client');
    const playbackWaitInput = document.getElementById('playback-wait');

    // --- Data Store ---
    let dynamicData = { tabUrl: null, poToken: null, shellFormattedCookies: null };
    const YOUTUBE_COOKIE_NAMES = new Set(['__Secure-1PAPISID', '__Secure-1PSID', '__Secure-1PSIDCC', '__Secure-1PSIDTS', '__Secure-3PAPISID', '__Secure-3PSID', '__Secure-3PSIDCC', '__Secure-3PSIDTS']);
    
    // --- Helper Functions ---
    function formatCookiesForShell(cookies) {
        const header = "# Netscape HTTP Cookie File\\n# Generated by yt-dlp Command Helper\\n\\n";
        const cookieLines = cookies.map(cookie => {
            const safeValue = cookie.value.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\$/g, '\\$').replace(/`/g, '\\`');
            return `${cookie.domain}\\t${cookie.hostOnly ? 'FALSE' : 'TRUE'}\\t${cookie.path}\\t${cookie.secure ? 'TRUE' : 'FALSE'}\\t${cookie.expirationDate ? Math.floor(cookie.expirationDate) : 0}\\t${cookie.name}\\t${safeValue}`;
        });
        return header + cookieLines.join('\\n');
    }

    function buildCommandString(settings) {
        const { tabUrl, poToken, shellFormattedCookies } = dynamicData;
        const { httpChunkSize, limitRate, playerClient, playbackWait } = settings;
        const poTokenPrefix = `${playerClient}.gvs+`;
        const formatString = `-f ba -S "+abr,+tbr,+size"`;

        return `echo -e "${shellFormattedCookies}" > cookies.txt && yt-dlp ${formatString} --http-chunk-size ${httpChunkSize}M --limit-rate ${limitRate}M --cookies cookies.txt --extractor-args "youtube:playback_wait=${playbackWait};player_client=${playerClient};po_token=${poTokenPrefix}${poToken}" "${tabUrl}"`;
    }

    function regenerateCommand() {
        const currentSettings = {
            httpChunkSize: httpChunkSizeInput.value,
            limitRate: limitRateInput.value,
            playerClient: playerClientSelect.value,
            playbackWait: playbackWaitInput.value
        };

        if (dynamicData.shellFormattedCookies && dynamicData.poToken && dynamicData.tabUrl) {
            generatedCommand = buildCommandString(currentSettings);
            statusMessage.textContent = 'Ready to Copy';
            copyCommandButton.disabled = false;
        } else {
            generatedCommand = '';
            copyCommandButton.disabled = true;
        }
    }
    
    async function initialize() {
        const { settings } = await chrome.storage.local.get('settings');
        const defaults = {
            httpChunkSize: 8,
            limitRate: 4,
            playerClient: 'tv',
            playbackWait: 2
        };
        const currentSettings = { ...defaults, ...settings };

        httpChunkSizeInput.value = currentSettings.httpChunkSize;
        limitRateInput.value = currentSettings.limitRate;
        playerClientSelect.value = currentSettings.playerClient;
        playbackWaitInput.value = currentSettings.playbackWait;

        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        if (!tab || !tab.url || !tab.url.startsWith("https://www.youtube.com/")) {
            statusMessage.textContent = 'Not a YouTube page.';
            return;
        }
        dynamicData.tabUrl = tab.url;

        const allCookies = await chrome.cookies.getAll({ url: tab.url });
        const filteredCookies = allCookies.filter(c => YOUTUBE_COOKIE_NAMES.has(c.name));
        if (filteredCookies.length < YOUTUBE_COOKIE_NAMES.size) {
            statusMessage.textContent = `Error: Missing ${YOUTUBE_COOKIE_NAMES.size - filteredCookies.length} required cookies.`;
            return;
        }
        dynamicData.shellFormattedCookies = formatCookiesForShell(filteredCookies);

        const storageResult = await chrome.storage.local.get([tab.id.toString()]);
        const requests = storageResult[tab.id.toString()] || [];
        const lastRequestWithToken = [...requests].reverse().find(r => r.poToken);
        if (lastRequestWithToken) {
            dynamicData.poToken = lastRequestWithToken.poToken;
        } else {
            statusMessage.textContent = 'Error: poToken not found. Refresh page.';
            return;
        }
        
        regenerateCommand();
    }

    // --- Event Listeners ---
    settingsForm.addEventListener('input', () => {
        const currentSettings = {
            httpChunkSize: httpChunkSizeInput.value,
            limitRate: limitRateInput.value,
            playerClient: playerClientSelect.value,
            playbackWait: playbackWaitInput.value
        };
        chrome.storage.local.set({ settings: currentSettings });
        regenerateCommand();
    });
    
    copyCommandButton.addEventListener('click', () => {
        if (copyCommandButton.disabled || !generatedCommand) return;
        navigator.clipboard.writeText(generatedCommand).then(() => {
            copyCommandButton.textContent = 'Copied!';
            setTimeout(() => { copyCommandButton.textContent = 'Copy Command'; }, 2000);
        });
    });

    initialize();
});